{"version":3,"sources":["components/Filter/Filter.module.css","components/ContactForm/ContactForm.module.css","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","App.js","reportWebVitals.js","index.js","components/ContactList/ContactList.module.css"],"names":["module","exports","ContactList","contacts","onDeleteContact","className","s","contacts_list","map","id","name","number","item","contact_text","type","onClick","ContactForm","onSubmit","useState","setName","setNumber","nameInputId","shortid","generate","numberInputId","handleChange","event","currentTarget","value","reset","container_form","e","preventDefault","form","htmlFor","label_text","input_form","onChange","pattern","title","required","button_form","Filter","label_filter","input_filter","App","key","defaultValue","JSON","parse","window","localStorage","getItem","state","setState","useEffect","setItem","stringify","useLocalStorage","setContacts","filter","setFilter","contactNames","contact","toLocaleLowerCase","nameEntered","includes","alert","normalizedFilter","toLowerCase","getVisibleContacts","contactId","prevState","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.bf0322be.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"label_filter\":\"Filter_label_filter__2ujAf\",\"input_filter\":\"Filter_input_filter__31yz4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container_form\":\"ContactForm_container_form__3NYzM\",\"form\":\"ContactForm_form__1XveB\",\"label_text\":\"ContactForm_label_text__q_vjZ\",\"input_form\":\"ContactForm_input_form__3EM74\"};","import React from 'react';\r\nimport s from './ContactList.module.css';\r\n\r\nconst ContactList = ({ contacts, onDeleteContact }) => {\r\n  return (\r\n    <div>\r\n      <ul className={s.contacts_list}>\r\n        {contacts.map(({ id, name, number }) => (\r\n          <li className={s.item} key={id}>\r\n            <p className={s.contact_text}>\r\n              {name}: {number}\r\n            </p>\r\n            <button type=\"button\" onClick={() => onDeleteContact(id)}>\r\n              Delete\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","// import React, { Component } from 'react';\r\nimport React, { useState } from 'react';\r\nimport shortid from 'shortid';\r\nimport s from './ContactForm.module.css';\r\n\r\nexport default function ContactForm({ onSubmit }) {\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const nameInputId = shortid.generate();\r\n  const numberInputId = shortid.generate();\r\n\r\n  const handleChange = event => {\r\n    const { name, value } = event.currentTarget;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    onSubmit(name, number);\r\n\r\n    reset();\r\n  };\r\n\r\n  const reset = () => {\r\n    setName(name => (name = ''));\r\n    setNumber(number => (number = ''));\r\n  };\r\n\r\n  return (\r\n    <div className={s.container_form}>\r\n      <form onSubmit={handleSubmit} className={s.form}>\r\n        <label htmlFor={nameInputId} className={s.label_text}>\r\n          Name\r\n          <input\r\n            className={s.input_form}\r\n            type=\"text\"\r\n            value={name}\r\n            onChange={handleChange}\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            id={nameInputId}\r\n          />\r\n        </label>\r\n        <label htmlFor={numberInputId} className={s.label_text}>\r\n          Number\r\n          <input\r\n            className={s.input_form}\r\n            type=\"tel\"\r\n            value={number}\r\n            onChange={handleChange}\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            id={numberInputId}\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={s.button_form}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\n// export default ContactForm;\r\n\r\n// class ContactForm extends Component {\r\n//   state = {\r\n//     name: '',\r\n//     number: '',\r\n//   };\r\n\r\n//   nameInputId = shortid.generate();\r\n//   numberInputId = shortid.generate();\r\n\r\n//   handleChange = e => {\r\n//     const { name, value } = e.currentTarget;\r\n//     this.setState({\r\n//       [name]: value,\r\n//     });\r\n//   };\r\n\r\n//   handleSubmit = e => {\r\n//     e.preventDefault();\r\n//     this.props.onSubmit(this.state.name, this.state.number);\r\n\r\n//     this.reset();\r\n//   };\r\n\r\n//   reset = () => {\r\n//     this.setState({ name: '', number: '' });\r\n//   };\r\n\r\n//   render() {\r\n//     const { name, number } = this.state;\r\n//     const { handleChange, handleSubmit } = this;\r\n//     return (\r\n//       <div className={s.container_form}>\r\n//         <form onSubmit={handleSubmit} className={s.form}>\r\n//           <label htmlFor={this.nameInputId} className={s.label_text}>\r\n//             Name\r\n//             <input\r\n//               className={s.input_form}\r\n//               type=\"text\"\r\n//               value={name}\r\n//               onChange={handleChange}\r\n//               name=\"name\"\r\n//               pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n//               title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n//               required\r\n//               id={this.nameInputId}\r\n//             />\r\n//           </label>\r\n//           <label htmlFor={this.numberInputId} className={s.label_text}>\r\n//             Number\r\n//             <input\r\n//               className={s.input_form}\r\n//               type=\"tel\"\r\n//               value={number}\r\n//               onChange={handleChange}\r\n//               name=\"number\"\r\n//               pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n//               title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n//               required\r\n//               id={this.numberInputId}\r\n//             />\r\n//           </label>\r\n\r\n//           <button type=\"submit\" className={s.button_form}>\r\n//             Add contact\r\n//           </button>\r\n//         </form>\r\n//       </div>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// export default ContactForm;\r\n\r\n// const handleChange = event => {\r\n//   const { name, value } = event.currentTarget;\r\n\r\n//   switch (name) {\r\n//     case 'name':\r\n//       setName(value);\r\n//       break;\r\n\r\n//     case 'number':\r\n//       setNumber(value);\r\n//       break;\r\n\r\n//     default:\r\n//       return;\r\n//   }\r\n// };\r\n","import React from 'react';\r\nimport s from './Filter.module.css';\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <div>\r\n    <label className={s.label_filter}>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n        className={s.input_filter}\r\n      />\r\n    </label>\r\n  </div>\r\n);\r\n\r\nexport default Filter;\r\n","import React, { useState, useEffect } from 'react';\nimport ContactList from './components/ContactList';\nimport ContactForm from './components/ContactForm';\nimport shortid from 'shortid';\nimport Filter from './components/Filter';\n\nfunction useLocalStorage(key, defaultValue) {\n  const [state, setState] = useState(() => {\n    return JSON.parse(window.localStorage.getItem(key)) ?? defaultValue;\n  });\n\n  useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state));\n  }, [key, state]);\n\n  return [state, setState];\n}\n\nexport default function App() {\n  const [contacts, setContacts] = useLocalStorage('contacts', []);\n  const [filter, setFilter] = useState('');\n\n  const addContacts = (name, number) => {\n    const contactNames = contacts.map(contact =>\n      contact.name.toLocaleLowerCase(),\n    );\n    const nameEntered = name.toLocaleLowerCase();\n\n    if (contactNames.includes(nameEntered)) {\n      return alert(`${name} is already in contacts`);\n    }\n\n    const contact = {\n      id: shortid.generate(),\n      name,\n      number,\n    };\n\n    setContacts(contacts => [contact, ...contacts]);\n  };\n\n  const deleteContact = contactId => {\n    setContacts(prevState =>\n      prevState.filter(contact => contact.id !== contactId),\n    );\n  };\n\n  const changeFilter = e => {\n    setFilter(e.currentTarget.value);\n  };\n\n  const getVisibleContacts = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter),\n    );\n  };\n\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm onSubmit={addContacts} />\n\n      <h2>Contacts</h2>\n      <Filter value={filter} onChange={changeFilter} />\n      <ContactList\n        contacts={getVisibleContacts()}\n        onDeleteContact={deleteContact}\n      />\n    </div>\n  );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contacts_list\":\"ContactList_contacts_list__25cnQ\",\"item\":\"ContactList_item__11GDy\",\"contact_text\":\"ContactList_contact_text__1Es_L\"};"],"sourceRoot":""}